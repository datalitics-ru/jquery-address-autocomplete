/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/jquery-autocomplete.js":
/*!************************************!*\
  !*** ./src/jquery-autocomplete.js ***!
  \************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function ($) {\n  'use strict';\n\n  var utils = function () {\n    return {\n      escapeRegExChars: function escapeRegExChars(value) {\n        return value.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n      },\n      clearText: function clearText(value) {\n        return value.replace(/(?:(?![\\t-\\r 0-9a-z\\xA0\\u017F\\u0430-\\u044F\\u0451\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u212A\\u3000\\uFEFF])[\\s\\S])+/gmi, \" \").replace(/[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+/gmi, \" \");\n      },\n      createNode: function createNode(containerClass) {\n        var div = document.createElement(\"div\");\n        div.className = containerClass;\n        div.style.position = \"absolute\";\n        div.style.display = \"none\";\n        return div;\n      }\n    };\n  }();\n\n  var keys = {\n    ESC: 27,\n    TAB: 9,\n    RETURN: 13,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n  };\n  var noop = $.noop;\n\n  function Autocomplete(el, options) {\n    var that = this;\n    that.element = el;\n    that.el = $(el);\n    that.suggestions = [];\n    that.badQueries = [];\n    that.selectedIndex = -1;\n    that.currentValue = that.element.value;\n    that.timeoutId = null;\n    that.cachedResponse = {};\n    that.onChangeTimeout = null;\n    that.onChange = null;\n    that.processContainer = null;\n    that.suggestionsContainer = null;\n    that.noSuggestionsContainer = null;\n    that.options = $.extend(true, {}, Autocomplete.defaults, options);\n    that.classes = {\n      selected: \"autocomplete-selected\",\n      suggestion: \"autocomplete-suggestion\"\n    };\n    that.hint = null;\n    that.hintValue = \"\";\n    that.selection = null;\n    that.initialize();\n    that.setOptions(options);\n  }\n\n  Autocomplete.utils = utils;\n  $.Autocomplete = Autocomplete; // Значения по умолчанию\n\n  Autocomplete.defaults = {\n    autoSelectFirst: false,\n    showLogo: true,\n    appendTo: \"body\",\n    addressType: \"adm\",\n    onSelect: null,\n    onHint: null,\n    width: \"auto\",\n    minChars: 2,\n    maxHeight: 700,\n    deferRequestBy: 0,\n    formatResult: _formatResult,\n    formatGroup: _formatGroup,\n    getGroup: null,\n    delimiter: null,\n    zIndex: 9999,\n    noCache: false,\n    onSearchStart: noop,\n    onSearchComplete: noop,\n    onSearchError: noop,\n    preserveInput: false,\n    containerClass: \"dlt-autocomplete-suggestions\",\n    itemsClass: \"dlt-autocomplete-items\",\n    logoClass: \"dlt-logo\",\n    inputClass: \"dlt-autocomplete-input\",\n    tabDisabled: false,\n    currentRequest: null,\n    triggerSelectOnValidInput: true,\n    preventBadQueries: true,\n    transformResult: _transformResult,\n    showNoSuggestionNotice: true,\n    noSuggestionNotice: \"<p>\\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439&nbsp;\\u0430\\u0434\\u0440\\u0435\\u0441.<br>\\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435&nbsp;\\u0434\\u0440\\u0443\\u0433\\u043E\\u0439.</p>\",\n    orientation: \"bottom\",\n    forceFixPosition: false\n  };\n\n  function _transformResult(response) {\n    return typeof response === \"string\" ? $.parseJSON(response) : response;\n  }\n\n  ;\n\n  function _formatResult(suggestion, currentValue) {\n    if (!currentValue) {\n      return suggestion.address_value;\n    }\n\n    var stringArr = utils.clearText(currentValue).split(\" \");\n    return suggestion.address_value.replace(new RegExp(\"(\" + stringArr.join(\"|\") + \")\", \"gi\"), \"<strong>$1</strong>\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/&lt;(\\/?strong)&gt;/g, \"<$1>\");\n  }\n\n  ;\n\n  function _formatGroup(suggestion, category) {\n    return \"<div class=\\\"autocomplete-group\\\">\" + category + \"</div>\";\n  }\n\n  ;\n  Autocomplete.prototype = {\n    initialize: function initialize() {\n      var that = this;\n      var suggestionSelector = \".\" + that.classes.suggestion;\n      var selected = that.classes.selected;\n      var options = that.options;\n      var container;\n      that.element.setAttribute(\"autocomplete\", \"off\");\n      that.element.classList.add(options.inputClass);\n      that.noSuggestionsContainer = $(\"<div class=\\\"dlt-no-suggestion\\\"></div>\").html(this.options.noSuggestionNotice).get(0);\n      that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\n      container = $(that.suggestionsContainer);\n      var items = document.createElement(\"div\");\n      items.classList.add(options.itemsClass);\n      container.append(items);\n      var process = document.createElement(\"div\");\n      process.classList.add('dlt-process-icon');\n      process.innerHTML = '<div></div>';\n      container.append(process);\n      that.processContainer = $(process);\n\n      if (options.showLogo) {\n        var logo = document.createElement(\"div\");\n        logo.classList.add(options.logoClass);\n        logo.innerHTML = '<a href=\"https://datalitics.ru\"><img alt=\"Даталитикс\" src=\"https://api.datalitics.ru/assets/logo_color_100.png\"></a>';\n        container.append(logo);\n      }\n\n      container.appendTo(options.appendTo || \"body\");\n\n      if (options.width !== \"auto\") {\n        container.css(\"width\", options.width);\n      }\n\n      container.on(\"mouseover.autocomplete\", suggestionSelector, function () {\n        that.activate($(this).data(\"index\"));\n      });\n      container.on(\"mouseout.autocomplete\", function () {\n        that.selectedIndex = -1;\n        container.children(\".\" + selected).removeClass(selected);\n      });\n      container.on(\"click.autocomplete\", suggestionSelector, function () {\n        that.select($(this).data(\"index\"));\n      });\n      container.on(\"click.autocomplete\", function () {\n        clearTimeout(that.blurTimeoutId);\n      });\n\n      that.fixPositionCapture = function () {\n        if (that.visible) {\n          that.fixPosition();\n        }\n      };\n\n      $(window).on(\"resize.autocomplete\", that.fixPositionCapture);\n      that.el.on(\"keydown.autocomplete\", function (e) {\n        that.onKeyPress(e);\n      });\n      that.el.on(\"keyup.autocomplete\", function (e) {\n        that.onKeyUp(e);\n      });\n      that.el.on(\"blur.autocomplete\", function () {\n        that.onBlur();\n      });\n      that.el.on(\"focus.autocomplete\", function () {\n        that.onFocus();\n      });\n      that.el.on(\"change.autocomplete\", function (e) {\n        that.onKeyUp(e);\n      });\n      that.el.on(\"input.autocomplete\", function (e) {\n        that.onKeyUp(e);\n      });\n    },\n    onFocus: function onFocus() {\n      var that = this;\n\n      if (that.disabled) {\n        return;\n      }\n\n      that.fixPosition();\n\n      if (that.el.val().length >= that.options.minChars) {\n        that.onValueChange();\n      }\n    },\n    onBlur: function onBlur() {\n      var that = this;\n      var options = that.options;\n      var value = that.el.val();\n      var query = that.getQuery(value);\n      that.blurTimeoutId = setTimeout(function () {\n        that.containerHide();\n\n        if (that.selection && that.currentValue !== query) {\n          (options.onInvalidateSelection || $.noop).call(that.element);\n        }\n      }, 200);\n    },\n    abortAjax: function abortAjax() {\n      var that = this;\n\n      if (that.currentRequest) {\n        that.currentRequest.abort();\n        that.currentRequest = null;\n      }\n    },\n    setOptions: function setOptions(suppliedOptions) {\n      var that = this;\n      var options = $.extend({}, that.options, suppliedOptions);\n      options.orientation = that.validateOrientation(options.orientation, \"bottom\");\n      $(that.suggestionsContainer).css({\n        'max-height': options.maxHeight + \"px\",\n        width: options.width + \"px\",\n        'z-index': options.zIndex\n      });\n      this.options = options;\n    },\n    clearCache: function clearCache() {\n      this.cachedResponse = {};\n      this.badQueries = [];\n    },\n    clear: function clear() {\n      this.clearCache();\n      this.currentValue = \"\";\n      this.suggestions = [];\n    },\n    disable: function disable() {\n      var that = this;\n      that.disabled = true;\n      clearTimeout(that.onChangeTimeout);\n      that.abortAjax();\n    },\n    enable: function enable() {\n      this.disabled = false;\n    },\n    fixPosition: function fixPosition() {\n      var that = this;\n      var $container = $(that.suggestionsContainer);\n      var containerParent = $container.parent().get(0);\n\n      if (containerParent !== document.body && !that.options.forceFixPosition) {\n        return;\n      }\n\n      var orientation = that.options.orientation;\n      var containerHeight = $container.outerHeight();\n      var height = that.el.outerHeight();\n      var offset = that.el.offset();\n      var styles = {\n        top: offset.top - 1,\n        left: offset.left\n      };\n\n      if (orientation === \"auto\") {\n        var viewPortHeight = $(window).height();\n        var scrollTop = $(window).scrollTop();\n        var topOverflow = -scrollTop + offset.top - containerHeight;\n        var bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);\n        orientation = Math.max(topOverflow, bottomOverflow) === topOverflow ? \"top\" : \"bottom\";\n      }\n\n      if (orientation === \"top\") {\n        styles.top += -containerHeight;\n      } else {\n        styles.top += height;\n      }\n\n      if (containerParent !== document.body) {\n        var opacity = $container.css(\"opacity\");\n        var parentOffsetDiff;\n\n        if (!that.visible) {\n          $container.css(\"opacity\", 0).show();\n        }\n\n        parentOffsetDiff = $container.offsetParent().offset();\n        styles.top -= parentOffsetDiff.top;\n        styles.top += containerParent.scrollTop;\n        styles.left -= parentOffsetDiff.left;\n\n        if (!that.visible) {\n          $container.css(\"opacity\", opacity).hide();\n        }\n      }\n\n      if (that.options.width === \"auto\") {\n        styles.width = that.el.outerWidth() + \"px\";\n      }\n\n      $container.css(styles);\n    },\n    isCursorAtEnd: function isCursorAtEnd() {\n      var that = this;\n      var valLength = that.el.val().length;\n      var selectionStart = that.element.selectionStart;\n      var range;\n\n      if (typeof selectionStart === \"number\") {\n        return selectionStart === valLength;\n      }\n\n      if (document.selection) {\n        range = document.selection.createRange();\n        range.moveStart(\"character\", -valLength);\n        return valLength === range.text.length;\n      }\n\n      return true;\n    },\n    onKeyPress: function onKeyPress(e) {\n      var that = this;\n\n      if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\n        that.suggest();\n        return;\n      }\n\n      if (that.disabled || !that.visible) {\n        return;\n      }\n\n      switch (e.which) {\n        case keys.ESC:\n          that.el.val(that.currentValue);\n          that.containerHide();\n          break;\n\n        case keys.RIGHT:\n          if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\n            that.selectHint();\n            break;\n          }\n\n          return;\n\n        case keys.TAB:\n          if (that.hint && that.options.onHint) {\n            that.selectHint();\n            return;\n          }\n\n          if (that.selectedIndex === -1) {\n            that.containerHide();\n            return;\n          }\n\n          that.select(that.selectedIndex);\n\n          if (that.options.tabDisabled === false) {\n            return;\n          }\n\n          break;\n\n        case keys.RETURN:\n          if (that.selectedIndex === -1) {\n            that.containerHide();\n            return;\n          }\n\n          that.select(that.selectedIndex);\n          break;\n\n        case keys.UP:\n          that.moveUp();\n          break;\n\n        case keys.DOWN:\n          that.moveDown();\n          break;\n\n        default:\n          return;\n      }\n\n      e.stopImmediatePropagation();\n      e.preventDefault();\n    },\n    onKeyUp: function onKeyUp(e) {\n      var that = this;\n\n      if (that.disabled) {\n        return;\n      }\n\n      switch (e.which) {\n        case keys.UP:\n        case keys.DOWN:\n          return;\n      }\n\n      clearTimeout(that.onChangeTimeout);\n\n      if (that.currentValue !== that.el.val()) {\n        that.findBestHint();\n\n        if (that.options.deferRequestBy > 0) {\n          that.onChangeTimeout = setTimeout(function () {\n            that.onValueChange();\n          }, that.options.deferRequestBy);\n        } else {\n          that.onValueChange();\n        }\n      }\n    },\n    onValueChange: function onValueChange() {\n      if (this.ignoreValueChange) {\n        this.ignoreValueChange = false;\n        return;\n      }\n\n      var that = this;\n      var options = that.options;\n      var value = that.el.val();\n      var query = that.getQuery(value);\n\n      if (that.selection && that.currentValue !== query) {\n        that.selection = null;\n        (options.onInvalidateSelection || $.noop).call(that.element);\n      }\n\n      clearTimeout(that.onChangeTimeout);\n      that.currentValue = value;\n      that.selectedIndex = -1;\n\n      if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {\n        that.select(0);\n        return;\n      }\n\n      if (query.length < options.minChars) {\n        that.containerHide();\n      } else {\n        that.getSuggestions(query);\n      }\n    },\n    isExactMatch: function isExactMatch(query) {\n      var suggestions = this.suggestions;\n      return suggestions.length === 1 && suggestions[0].value.toLowerCase() === query.toLowerCase();\n    },\n    getQuery: function getQuery(value) {\n      var delimiter = this.options.delimiter;\n      var parts;\n\n      if (!delimiter) {\n        return value;\n      }\n\n      parts = value.split(delimiter);\n      return $.trim(parts[parts.length - 1]);\n    },\n    getSuggestions: function getSuggestions(q) {\n      var container = $(this.suggestionsContainer);\n      var response;\n      var that = this;\n      var options = that.options;\n      var serviceUrl = \"https://api.datalitics.ru/v1/address/\" + options.addressType + \"/suggest\";\n      var params = {};\n      var cacheKey;\n      params.q = q;\n\n      if (options.onSearchStart.call(that.element, params) === false) {\n        return;\n      }\n\n      cacheKey = serviceUrl + \"?\" + $.param(params || {});\n      response = that.cachedResponse[cacheKey];\n\n      if (response && Array.isArray(response)) {\n        that.suggestions = response;\n        that.suggest();\n        options.onSearchComplete.call(that.element, q, that.suggestions);\n      } else if (!that.isBadQuery(q)) {\n        that.abortAjax();\n        container.addClass('process');\n        that.currentRequest = $.ajax({\n          url: serviceUrl,\n          data: params,\n          type: \"GET\",\n          dataType: \"text\"\n        }).done(function (data) {\n          var result;\n          that.currentRequest = null;\n          result = options.transformResult(data, q);\n          that.processResponse(result, q, cacheKey);\n          options.onSearchComplete.call(that.element, q, result.suggestions);\n          container.removeClass('process');\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n          options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\n          container.removeClass('process');\n        });\n      } else {\n        this.noSuggestions();\n        options.onSearchComplete.call(that.element, q, []);\n      }\n    },\n    isBadQuery: function isBadQuery(q) {\n      if (!this.options.preventBadQueries) {\n        return false;\n      }\n\n      var badQueries = this.badQueries;\n      var i = badQueries.length;\n\n      while (i--) {\n        if (q.indexOf(badQueries[i]) === 0) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    containerShow: function containerShow() {\n      var container = $(this.suggestionsContainer);\n      container.show();\n      container.addClass('active');\n      this.el.addClass('active');\n      this.visible = true;\n    },\n    containerHide: function containerHide() {\n      var that = this;\n      var container = $(that.suggestionsContainer);\n\n      if ($.isFunction(that.options.onHide) && that.visible) {\n        that.options.onHide.call(that.element, container);\n      }\n\n      that.visible = false;\n      that.selectedIndex = -1;\n      clearTimeout(that.onChangeTimeout);\n      container.hide();\n      that.onHint(null);\n      container.removeClass('active');\n      this.el.removeClass('active');\n    },\n    suggest: function suggest() {\n      if (!this.suggestions.length) {\n        if (this.options.showNoSuggestionNotice) {\n          this.noSuggestions();\n        } else {\n          this.containerHide();\n        }\n\n        return;\n      }\n\n      var that = this;\n      var options = that.options;\n      var formatResult = options.formatResult;\n      var value = that.getQuery(that.currentValue);\n      var className = that.classes.suggestion;\n      var classSelected = that.classes.selected;\n      var container = $(that.suggestionsContainer);\n      var noSuggestionsContainer = $(that.noSuggestionsContainer);\n      var beforeRender = options.beforeRender;\n      var html = \"\";\n      var category;\n\n      var formatGroup = function formatGroup(suggestion, index) {\n        var currentCategory = options.getGroup(suggestion, index);\n\n        if (category === currentCategory) {\n          return \"\";\n        }\n\n        category = currentCategory;\n        return options.formatGroup(suggestion, category);\n      };\n\n      if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {\n        that.select(0);\n        return;\n      }\n\n      $.each(that.suggestions, function (i, suggestion) {\n        if ($.isFunction(options.getGroup)) {\n          html += formatGroup(suggestion, value, i);\n        }\n\n        html += \"<div class=\\\"\" + className + \"\\\" title=\\\"\" + suggestion.address_value + \"\\\" data-index=\\\"\" + i + \"\\\"><address>\" + formatResult(suggestion, value, i) + \"</address></div>\";\n      });\n      this.adjustContainerWidth();\n      noSuggestionsContainer.detach();\n      container.find(\".\" + options.itemsClass).html(html);\n\n      if ($.isFunction(beforeRender)) {\n        beforeRender.call(that.element, container, that.suggestions);\n      }\n\n      that.fixPosition();\n      that.containerShow();\n\n      if (options.autoSelectFirst) {\n        that.selectedIndex = 0;\n        container.scrollTop(0);\n        container.children(\".\" + className).first().addClass(classSelected);\n      }\n\n      that.findBestHint();\n    },\n    noSuggestions: function noSuggestions() {\n      var that = this;\n      var options = that.options;\n      var beforeRender = options.beforeRender;\n      var container = $(that.suggestionsContainer);\n      var noSuggestionsContainer = $(that.noSuggestionsContainer);\n      this.adjustContainerWidth();\n      noSuggestionsContainer.detach();\n      container.find(\".\" + options.itemsClass).empty();\n      container.prepend(noSuggestionsContainer);\n\n      if ($.isFunction(beforeRender)) {\n        beforeRender.call(that.element, container, that.suggestions);\n      }\n\n      that.fixPosition();\n      this.containerShow();\n    },\n    adjustContainerWidth: function adjustContainerWidth() {\n      var that = this;\n      var options = that.options;\n      var width;\n      var container = $(that.suggestionsContainer);\n\n      if (options.width === \"auto\") {\n        width = that.el.outerWidth();\n        container.css(\"width\", width > 0 ? width : 300);\n      } else if (options.width === \"flex\") {\n        container.css(\"width\", \"\");\n      }\n    },\n    findBestHint: function findBestHint() {\n      var that = this;\n      var value = that.el.val().toLowerCase();\n      var bestMatch = null;\n\n      if (!value) {\n        return;\n      }\n\n      $.each(that.suggestions, function (i, suggestion) {\n        var foundMatch = suggestion.address_value.toLowerCase().indexOf(value) === 0;\n\n        if (foundMatch) {\n          bestMatch = suggestion;\n        }\n\n        return !foundMatch;\n      });\n      that.onHint(bestMatch);\n    },\n    onHint: function onHint(suggestion) {\n      var that = this;\n      var onHintCallback = that.options.onHint;\n      var hintValue = \"\";\n\n      if (suggestion) {\n        hintValue = that.currentValue + suggestion.address_value.substr(that.currentValue.length);\n      }\n\n      if (that.hintValue !== hintValue) {\n        that.hintValue = hintValue;\n        that.hint = suggestion;\n\n        if ($.isFunction(onHintCallback)) {\n          onHintCallback.call(that.element, hintValue);\n        }\n      }\n    },\n    verifySuggestionsFormat: function verifySuggestionsFormat(suggestions) {\n      if (suggestions.length && typeof suggestions[0] === \"string\") {\n        return $.map(suggestions, function (value) {\n          return {\n            value: value,\n            data: null\n          };\n        });\n      }\n\n      return suggestions;\n    },\n    validateOrientation: function validateOrientation(orientation, fallback) {\n      orientation = $.trim(orientation || \"\").toLowerCase();\n\n      if ($.inArray(orientation, [\"auto\", \"bottom\", \"top\"]) === -1) {\n        orientation = fallback;\n      }\n\n      return orientation;\n    },\n    processResponse: function processResponse(result, originalQuery, cacheKey) {\n      var that = this;\n      var items = [];\n      var options = that.options;\n      items = result.data ? result.data.items : [];\n      items = that.verifySuggestionsFormat(items);\n\n      if (!options.noCache) {\n        that.cachedResponse[cacheKey] = items;\n\n        if (options.preventBadQueries && !items.length) {\n          that.badQueries.push(originalQuery);\n        }\n      }\n\n      if (originalQuery !== that.getQuery(that.currentValue)) {\n        return;\n      }\n\n      that.suggestions = items;\n      that.suggest();\n    },\n    activate: function activate(index) {\n      var that = this;\n      var activeItem;\n      var selected = that.classes.selected;\n      var container = $(that.suggestionsContainer);\n      var children = container.find(\".\" + that.classes.suggestion);\n      container.find(\".\" + selected).removeClass(selected);\n      that.selectedIndex = index;\n\n      if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\n        activeItem = children.get(that.selectedIndex);\n        $(activeItem).addClass(selected);\n        return activeItem;\n      }\n\n      return null;\n    },\n    selectHint: function selectHint() {\n      var that = this;\n      var i = $.inArray(that.hint, that.suggestions);\n      that.select(i);\n    },\n    select: function select(i) {\n      var that = this;\n      that.containerHide();\n      that.onSelect(i);\n    },\n    moveUp: function moveUp() {\n      var that = this;\n\n      if (that.selectedIndex === -1) {\n        return;\n      }\n\n      if (that.selectedIndex === 0) {\n        $(that.suggestionsContainer).children(\".\" + that.classes.suggestion).first().removeClass(that.classes.selected);\n        that.selectedIndex = -1;\n        that.ignoreValueChange = false;\n        that.el.val(that.currentValue);\n        that.findBestHint();\n        return;\n      }\n\n      that.adjustScroll(that.selectedIndex - 1);\n    },\n    moveDown: function moveDown() {\n      var that = this;\n\n      if (that.selectedIndex === that.suggestions.length - 1) {\n        return;\n      }\n\n      that.adjustScroll(that.selectedIndex + 1);\n    },\n    adjustScroll: function adjustScroll(index) {\n      var that = this;\n      var activeItem = that.activate(index);\n\n      if (!activeItem) {\n        return;\n      }\n\n      var offsetTop;\n      var upperBound;\n      var lowerBound;\n      var heightDelta = $(activeItem).outerHeight();\n      offsetTop = activeItem.offsetTop;\n      upperBound = $(that.suggestionsContainer).scrollTop();\n      lowerBound = upperBound + that.options.maxHeight - heightDelta;\n\n      if (offsetTop < upperBound) {\n        $(that.suggestionsContainer).scrollTop(offsetTop);\n      } else if (offsetTop > lowerBound) {\n        $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);\n      }\n\n      if (!that.options.preserveInput) {\n        that.ignoreValueChange = true;\n        that.el.val(that.getValue(that.suggestions[index].value));\n      }\n\n      that.onHint(null);\n    },\n    onSelect: function onSelect(index) {\n      var that = this;\n      var onSelectCallback = that.options.onSelect;\n      var suggestion = that.suggestions[index];\n      that.currentValue = that.getValue(suggestion.address_value);\n\n      if (that.currentValue !== that.el.val() && !that.options.preserveInput) {\n        that.el.val(that.currentValue);\n      }\n\n      that.onHint(null);\n      that.suggestions = [];\n      that.selection = suggestion;\n\n      if ($.isFunction(onSelectCallback)) {\n        onSelectCallback.call(that.element, suggestion);\n      }\n    },\n    getValue: function getValue(value) {\n      var that = this;\n      var delimiter = that.options.delimiter;\n      var currentValue;\n      var parts;\n\n      if (!delimiter) {\n        return value;\n      }\n\n      currentValue = that.currentValue;\n      parts = currentValue.split(delimiter);\n\n      if (parts.length === 1) {\n        return value;\n      }\n\n      return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\n    },\n    dispose: function dispose() {\n      var that = this;\n      that.el.off(\".autocomplete\").removeData(\"autocomplete\");\n      $(window).off(\"resize.autocomplete\", that.fixPositionCapture);\n      $(that.suggestionsContainer).remove();\n    }\n  };\n\n  $.fn.devbridgeAutocomplete = function (options, args) {\n    var dataKey = \"autocomplete\";\n\n    if (!arguments.length) {\n      return this.first().data(dataKey);\n    }\n\n    return this.each(function () {\n      var inputElement = $(this);\n      var instance = inputElement.data(dataKey);\n\n      if (typeof options === \"string\") {\n        if (instance && typeof instance[options] === \"function\") {\n          instance[options](args);\n        }\n      } else {\n        if (instance && instance.dispose) {\n          instance.dispose();\n        }\n\n        instance = new Autocomplete(this, options);\n        inputElement.data(dataKey, instance);\n      }\n    });\n  };\n\n  if (!$.fn.autocomplete) {\n    $.fn.autocomplete = $.fn.devbridgeAutocomplete;\n  }\n});\n\n//# sourceURL=webpack://datalitics-jquery-autocomplete/./src/jquery-autocomplete.js?");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = jQuery;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/jquery-autocomplete.js");
/******/ 	
/******/ })()
;